{"version":3,"sources":["components/Store.js","components/MainChat.js","components/Login.jsx","components/Logout.jsx","components/AppNav.jsx","App.js","serviceWorker.js","index.js"],"names":["socket","CTX","React","createContext","initState","General","from","msg","Soprano","Alto","Tenor","Musicians","reducer","state","action","payload","section","type","sendChatAction","value","emit","Store","props","useReducer","allChats","dispatch","io","on","console","log","user","useAuth0","Provider","children","useStyles","makeStyles","theme","root","margin","padding","spacing","flex","display","alignItems","sectionWindow","width","height","borderRight","chatWindow","chatBox","button","MainChat","classes","useContext","sections","Object","keys","useState","activeSection","changeActiveSection","textValue","changeTextValue","Paper","className","elevation","Typography","variant","component","gutterBottom","Divider","List","map","ListItem","onClick","e","target","innerText","key","ListItemText","primary","chat","i","Avatar","src","picture","TextField","id","label","onChange","Button","color","Login","loginWithRedirect","LogoutButton","logout","returnTo","window","location","origin","flexGrow","menuButton","marginRight","title","ButtonAppBar","AppBar","position","Toolbar","IconButton","edge","aria-label","Logout","App","Boolean","hostname","match","ReactDOM","render","domain","clientId","redirectUri","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.86f247e6.chunk.js","sourcesContent":["import React from 'react'\nimport io from 'socket.io-client'\nimport { useAuth0 } from \"@auth0/auth0-react\";\nexport const CTX = React.createContext();\n\n\n\n\n\nconst initState = {\n    General: [\n        {from: '', msg:'Welcome'},\n    ],\n    Soprano: [\n        {from: '', msg:''},\n    ],\n    Alto: [\n        {from: '', msg:''},\n    ],\n    Tenor: [\n        {from: '', msg:''},\n    ],\n    Musicians: [\n        {from: '', msg:''},\n    ]\n}\n\nfunction reducer(state, action) {\n    const {from, msg, section}= action.payload;\n    switch(action.type) {\n     case 'RECEIVE_MESSAGE':\n         return {\n            ...state,\n            [section]: [\n                ...state[section],\n                {from, msg}\n            ]\n            } \n    default: \n            return state  \n    }\n}\n\n\nlet socket;\n\nfunction sendChatAction (value) {\n    socket.emit('chat message', value);\n\n}\n\nexport default function Store(props) {\n    const [allChats, dispatch] = React.useReducer(reducer, initState)\n\n\n    if (!socket) {\n        socket = io(':3001');\n        socket.on('chat message', function(msg){\n            console.log({msg});\n            dispatch({type: 'RECEIVE_MESSAGE', payload:msg});\n          });\n        \n    }\n    \n   \nconst { user} = useAuth0();  \n   \n        return (\n            <CTX.Provider value={{allChats, sendChatAction, user}}>\n               {props.children} \n            </CTX.Provider>\n        )\n    \n}\n","import React from 'react'\nimport Paper from '@material-ui/core/Paper';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport Chip from '@material-ui/core/Chip';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Avatar from '@material-ui/core/Avatar';\n\nimport {CTX} from './Store.js'\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        margin: '50px',\n        padding: theme.spacing(3,2)\n    },\n    flex: {\n        display: 'flex',\n        alignItems: 'center'\n    },\n    sectionWindow: {\n        width: '30%',\n        height: '300px',\n        borderRight: '1px solid black'\n\n    },\n    chatWindow: {\n        width: '70%',\n        height: '300px',\n        padding: '10px'\n\n    },\n    chatBox: {\n        width: '85%'\n\n    },\n    button: {\n        width:'15%'\n\n    }\n  }));\n  \n  export default function MainChat() {\n    const classes = useStyles();\n\n    //Store\n    const {allChats, sendChatAction, user} = React.useContext(CTX);\n    // console.log(allChats);\n    // console.log(React.useContext(CTX));\n    const sections = Object.keys(allChats);\n\n\n    //local state\n    const [activeSection, changeActiveSection]= React.useState(sections[0])\n    const [textValue, changeTextValue]= React.useState('');\n\n    return (\n        <div>\n        <Paper className={classes.root} elevation={3}>\n            <Typography variant=\"h4\" component=\"h4\">\n                Chit Chat\n            </Typography>\n            <Typography variant=\"h6\" gutterBottom>\n                {activeSection}\n            </Typography>\n            <Divider />\n            <div className={classes.flex}>\n                <div className={classes.sectionWindow}>\n                    <List>\n                        {\n                            sections.map(section => (\n                                <ListItem onClick={e => changeActiveSection(e.target.innerText)} key={section} button>\n                                    <ListItemText primary={section} />\n                                </ListItem>\n\n                            ))\n                        }\n                    </List>\n\n                </div>\n                <div className={classes.chatWindow}>\n                        {\n                            allChats[activeSection].map((chat, i) => (\n                                <div className={classes.flex} key={i}> \n                                <Avatar src={chat.from.picture} />\n                                {/* <Chip label={chat.from.name} className={classes.chip} /> */}\n                                <Typography variant=\"body1\" gutterBottom> {chat.msg} </Typography>\n                                </div>\n\n                            ))\n                        }\n                </div>\n            </div>\n            <div className={classes.flex}>\n            <TextField id=\"filled-basic\" \n                label=\"Type Message\" \n                className={classes.chatBox} \n                variant=\"filled\"\n                value={textValue} \n                onChange={e => changeTextValue(e.target.value)}/>\n            <Button \n                variant=\"contained\" \n                color=\"primary\"\n                className={classes.button}\n                onClick={() => {\n                    sendChatAction({ from: user, msg:textValue, section: activeSection}); \n                    changeTextValue('');\n                }}\n                \n                >\n                Send\n            </Button>\n                                    \n            </div>\n        </Paper> \n\n      </div>\n    );\n  }\n\n","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Button from '@material-ui/core/Button';\n\nconst Login = () => {\n    const { loginWithRedirect } = useAuth0();\n\n    return <Button \n            color=\"inherit\" \n            onClick={() => loginWithRedirect()}>\n                Log In\n            </Button>;\n};\n\nexport default Login;","import React from \"react\";\nimport { useAuth0 } from \"@auth0/auth0-react\";\nimport Button from '@material-ui/core/Button';\n\nconst LogoutButton = () => {\n    const { logout } = useAuth0();\n\n    return (\n    <Button color = \"inherit\"\n            onClick={() => logout({ returnTo: window.location.origin })}>\n        Log Out\n    </Button>\n    );\n};\n\nexport default LogoutButton;","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport Login from './Login'\nimport Logout from './Logout';\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n    flexGrow: 1,\n    },\n    menuButton: {\n    marginRight: theme.spacing(2),\n    },\n    title: {\n        flexGrow: 1,\n    },\n    }));\n\n    export default function ButtonAppBar() {\n    const classes = useStyles();\n\n    return (\n        <div className={classes.root}>\n        <AppBar position=\"static\">\n            <Toolbar>\n            <IconButton edge=\"start\" className={classes.menuButton} color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon />\n            </IconButton>\n            <Typography variant=\"h6\" className={classes.title}>\n                Choir Companion    \n            </Typography>\n            <Login />\n            <Logout />\n            </Toolbar>\n        </AppBar>\n        </div>\n    );\n    }\n","import React from 'react';\nimport './App.css';\nimport 'fontsource-roboto';\nimport MainChat from './components/MainChat.js'\nimport Store from './components/Store.js'\nimport Login from './components/Login'\n\nimport AppNav from './components/AppNav'\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <AppNav />\n      <Store>\n        <MainChat />\n      </Store>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Auth0Provider } from \"@auth0/auth0-react\";\n\nReactDOM.render(\n  <Auth0Provider\n    domain=\"dev-5rx8qacm.us.auth0.com\"\n    clientId=\"cFze4Ncr7710nldMw5WnF8aBnOKS9J6D\"\n    redirectUri={window.location.origin}\n  >\n\n    <App />\n  </Auth0Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}